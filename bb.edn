{:min-bb "0.7.0"
 :tasks
 {:requires
  [[babashka.classpath :as cp]
   [babashka.fs :as fs]
   [babashka.process :as bpr]
   [clojure.edn :as edn]
   [clojure.java.io :as io]
   [clojure.set :as cs]
   [clojure.string :as str]]
  :init
  (do
    ;; Add shared build code to classpath.
    (cp/add-classpath "./bb")
    (require '[com.kubelt.cli :as cli])
    (require '[com.kubelt.environ :as environ])
    (require '[com.kubelt.package :as package])
    (require '[com.kubelt.semver :as semver])
    (require '[com.kubelt.shadow :as shadow])
    (require '[com.kubelt.time :as time])
    ;; Extract version from package.json.
    (def version (cli/release-version "package.json" *command-line-args*)))

  ;; Development
  ;; ---------------------------------------------------------------------------

  semver:parse
  (let [version-map (semver/parse version)]
    (println (semver/to-str version-map)))

  package:version
  {:doc "Print out the package.json version"
   :task (println version)}

  package:options
  {:doc "Print out the CLI options."
   :task (prn (cli/parse-options *command-line-args*))}

  timestamp:iso-date
  {:doc "Print out the date in ISO format"
   :task (println (time/iso-date))}

  cmd:example
  {:doc "Invoke Clojure build script via shadow-cljs."
   :task (shell "npx shadow-cljs run build.command/example")},

  ;; Tasks
  ;; ---------------------------------------------------------------------------

  ;; TODO generate Apache Maven .m2/settings.xml include GitHub package
  ;; repository setup. User will have to specify their username and
  ;; personal access token and put the file into the right spot.

  ;; TODO generate $HOME/.npmrc configuration

  lint:init
  {:doc "Initialize the linter"
   :task (do
           ;; Create the .clj-kondo directory if it doesn't exist.
           (let [kondo-dir ".clj-kondo"]
             (if-not (fs/directory? kondo-dir)
               (fs/create-dir kondo-dir)))
           ;; Pre-populate linter directory with analysis results.
           (let [args ["-M:kondo" "--parallel" "--dependencies" "--copy-configs" "--lint" "src/"]
                 command (str/join " " args)]
             (clojure command)))}

  lint:dev
  {:doc "Lint development source code"
   :task (let [dir "src/dev"]
           (clojure (str/join " " ["-M:kondo" "--parallel" "--lint" dir])))}

  lint:main
  {:doc "Lint application source code"
   :task (let [dir "src/main"]
           (clojure (str/join " " ["-M:kondo" "--parallel" "--lint" dir])))}

  lint:test
  {:doc "Lint test source code"
   :task (let [dir "src/test"]
           (clojure (str/join " " ["-M:kondo" "--parallel" "--lint" dir])))}

  lint:all
  {:doc "Lint all source code"
   :task (let [dir "src/"]
           (clojure (str/join " " ["-M:kondo" "--parallel" "--lint" dir])))}

  build:ddt:develop
  {:doc "Build development version of ddt command line application"
   :task (shell "npx shadow-cljs compile ddt")}

  build:ddt:release
  {:doc "Build release version of ddt command line application"
   :task (shell "npx shadow-cljs release ddt")}

  build:kbt:develop
  {:doc "Build development version of kbt command line application"
   :task (shell "npx shadow-cljs compile kbt")}

  build:kbt:release
  {:doc "Build release version of kbt command line application"
   :task (shell "npx shadow-cljs release kbt")}

  build:p2p:develop
  {:doc "Build development version of the p2p service"
   :task (shell "npx shadow-cljs compile p2p")}

  build:p2p:release
  {:doc "Build release version of the p2p service"
   :task (shell "npx shadow-cljs release p2p")}

  build:sdk:develop
  {:doc "Build development version of the sdk for node"
   :task (shell "npx shadow-cljs compile sdk")}

  build:sdk:release
  {:doc "Build release version of the sdk for node"
   :task (shell "npx shadow-cljs release sdk")}

  build:sdk-web:develop
  {:doc "Build development version of the sdk using webpack"
   :depends [build:sdk:develop]
   :task (shell "npx lerna run build --scope @kubelt/sdk-web")}

  build:sdk-web:release
  {:doc "Build release version of the sdk using webpack"
   :depends [build:sdk:release]
   :task (shell "npx lerna run build --scope @kubelt/sdk-web")}

  build:web:develop
  {:doc "Build development version of sdk for web"
   :task (shell "npx shadow-cljs compile web")}

  build:web:release
  {:doc "Build release version of sdk for web"
   :task (shell "npx shadow-cljs release web")}

  ;; TODO: use varaibles for paths
  build:dapp:css
  {:doc "Generate CSS for the dapp"
   :task (shell "npx tailwindcss -i ./dapp/src/css/app.css -o ./dapp/resources/public/app.css --config dapp/tailwind.config.js")}

  build:dapp:develop
  {:doc "Build a development version of dapp"
   :task (shell "npx shadow-cljs compile dapp")} ;; TODO: add tests
  
  build:dapp:css-watch
  {:doc "Watch dapp CSS and rebuild when changed"
   :task (shell "npx tailwindcss -i ./dapp/src/css/app.css -o ./dapp/resources/public/app.css --config dapp/tailwind.config.js --watch")}

  build:dapp:develop-watch
  {:doc "Watch dapp sources and build development version when changed"
   :task (shell "npx shadow-cljs watch dapp browser-test karma-test")}

  -build:dapp:watch
  {:doc "Watch all dapp sources and rebuild development version when changed"
   :depends [build:dapp:css-watch build:dapp:develop-watch]}
  
  build:dapp:watch
  {:task (run '-build:dapp:watch {:parallel true})}

  build:dapp:release
  {:doc "Build release version of dapp CSS"
   :task (shell "npx tailwindcss -i ./dapp/src/css/app.css -o ./dapp/resources/public/app.css && npx shadow-cljs release dapp")}

  test:sdk:cljs:develop
  {:doc "Build and run development version of sdk tests"
   :task (shell "npx shadow-cljs compile sdk-test")}

  test:sdk:cljs:release
  {:doc "Build and run release version of sdk tests"
   :task (shell "npx shadow-cljs release sdk-test")}

  test:sdk:js:develop
  {:doc "Run JavaScript tests against development sdk"
   :depends [build:sdk:develop]
   :task (shell {:dir "packages/sdk-js/__tests__"} "node api-v1.js")}

  test:sdk:js:release
  {:doc "Run JavaScript tests against release sdk"
   :depends [build:sdk:release]
   :task (shell {:dir "packages/sdk-js/__tests__"} "node api-v1.js")}

  test:sdk-web:develop
  {:doc ""
   :depends-on [build:sdk-web:develop]
   :task (shell "npx lerna run test --scope @kubelt/sdk-web")}

  test:sdk-web:release
  {:doc ""
   :depends-on [build:sdk-web:release]
   :task (shell "npx lerna run test --scope @kubelt/sdk-web")}

  test:web:develop
  {:doc ""
   :task (shell "npx shadow-cljs compile web-test")}

  test:web:release
  {:doc ""
   :task (shell "npx shadow-cljs release web-test")}

  test:dapp:develop
  {:doc "Run dapp tests against development version"
   :depends-on [build:dapp:develop]
   :task (shell "npx shadow-cljs compile dapp")} ;; TODO: add test

  test:dapp:release
  {:doc "Run dapp tests against release version"
   :task (shell "npx tailwindcss -i ./dapp/src/css/app.css -o ./dapp/resources/public/app.css && npx shadow-cljs release dapp")}

  test:all:develop
  {:doc "Build and test all develop"
   :depends [test:sdk:cljs:develop
             test:sdk:js:develop
             test:web:develop
             test:sdk-web:develop
             test:dapp:develop]}

  test:all:release
  {:doc "Build and test all release"
   :depends [test:sdk:cljs:release
             test:sdk:js:release
             test:web:release
             test:web-sdk:release
             test:dapp:release]}}}
