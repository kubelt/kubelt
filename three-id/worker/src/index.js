/**
 * three-id/worker/src/index.js
 *
 * - Run `npx wrangler dev src/index.js` in your terminal to start a development server
 * - Open a browser tab at http://localhost:8787/ to see your worker in action
 * - Run `npx wrangler publish src/index.js --name my-worker` to publish your worker
 *
 * Learn more at https://developers.cloudflare.com/workers/
 */

import { getAssetFromKV, NotFoundError, MethodNotAllowedError } from '@cloudflare/kv-asset-handler';

// This manifest is generated as part of the deployment process and
// should not be checked in.
import assetManifest from './asset-manifest.json';

// Should it becomes necessary to perform custom key mapping it can be
// done as follows:
//
// import { getAssetFromKV, mapRequestToAsset } from '@cloudflare/kv-asset-handler'
// ...
// const customKeyModifier = request => {
//   let url = request.url
//   //custom key mapping optional
//   url = url.replace('/docs', '').replace(/^\/+/, '')
//   return mapRequestToAsset(new Request(url, request))
// }
// let asset = await getAssetFromKV(event, { mapRequestToAsset: customKeyModifier })

// getAssetFromKV(Evt) => Promise
//
// getAssetFromKV is an async function that takes an Evt object
// (containing a Request and a waitUntil) and returns a Response object
// if the request matches an asset in KV, otherwise it will throw a
// KVError. It also serves index.html from '/'.
//
// Optional arguments may be provided in a second object argument and
// include:
// - mapRequestToAsset
// - cacheControl
// - browserTTL
// - edgeTTL
// - bypassCache
// - ASSET_NAMESPACE (required for ES modules)
// - ASSET_MANIFEST (required for ES modules)

// Workers Sites with Wrangler bundles up a text blob that maps request
// paths to content-hashed keys that are generated by Wrangler as a
// cache-busting measure. If this option/binding is not present, the
// function will fallback to using the raw pathname to look up your
// asset in KV.

// if (request.url.includes('/docs')) {
//     return await getAssertFromKV(...)
// } else {
//     return fetch(request);
// }

export default {
    async fetch(request, env, ctx) {
        if (env['ENVIRONMENT'] === "development") {
            // Development-specific code.
        } else if (env['ENVIRONMENT'] === "next") {
            // Staging-specific code.
            console.log("next");
        } else if (env['ENVIRONMENT'] === "current") {
            // Production-specific code.
            console.log("current");
        }

        try {
            return await getAssetFromKV({ request, waitUntil(promise) {
                    return ctx.waitUntil(promise);
                },
            }, {
                ASSET_NAMESPACE: env.GATE,
                ASSET_MANIFEST: assetManifest,
            });
        } catch (e) {
            if (e instanceof NotFoundError) {
                // TODO serve 404 page?
                return new Response('Not Found', { status: 404 });
            } else if (e instanceof MethodNotAllowedError) {
                // TODO serve error page?
                return new Response('Method Not Allowed', { status: 405 });
            } else {
                // TODO serve ISE page?
                console.log(e);
                return new Response('An unexpected error occurred', { status: 500 });
            }
        }
    },
};
