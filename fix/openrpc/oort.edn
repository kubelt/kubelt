{:openrpc "1.2.6",
 :info {:title "Kubelt Core", :version "0.0.0"},
 :methods
 [{:name "kb_ping",
   :params [],
   :result {:name "pong", :schema {:type "string"}}}
  {:name "kb_pong",
   :params [],
   :result {:name "pong", :schema {:type "null"}},
   :errors [{:code -31999, :message "cannot pong"}]}
  {:name "kb_auth",
   :params
   [{:name "address",
     :summary "Account address",
     :required true,
     :schema {:type "string"}}],
   :result {:name "nonce", :schema {:type "string"}}}
  {:name "kb_auth_verify",
   :params
   [{:name "nonce",
     :summary "Challenge Nonce",
     :required true,
     :schema {:type "string"}}
    {:name "signature",
     :summary "Nonce Signature",
     :required true,
     :schema {:type "string"}}],
   :result {:name "jwt", :schema {:type "string"}}}
  {:name "kb_core_create",
   :params
   [{:name "name",
     :summary "Core Name",
     :required true,
     :schema {:type "string"}}],
   :result {:name "Core Address", :schema {:type "string"}}}
  {:name "kb_core_add_signer",
   :params
   [{:name "address",
     :summary "Signer Account Address",
     :required true,
     :schema {:type "string"}}
    {:name "permissions",
     :summary "Signer Granted Permissions",
     :required true,
     :schema {:type "array"}}],
   :result {:name "Signer", :schema {:type "string"}}}
  {:name "qn_fetchNFTs"
   :params [{:name "result"
             :schema
             {:type "object"
              :required ["wallet"]
              :properties
              {:wallet {:name "wallet"
                        :summary "The wallet address to check for NFTs"
                        :type "string"}
               :contracts {:name "contracts"
                           :summary "List of NFT contract addresses you'd like to get ownership data from. Contract addresses may be optionally suffixed with :tokenId to specify a specific NFT id to filter on. For example, 0x2106c...7aeaa:1234 will filter Loopy Donuts on the NFT token with id 1234 only. You may include up to 20 contract addresses per request.",
                           :type "string"}

               :omitFields {:name "omitFields"
                            :summary "Optionally omit specific properties of objects from the \"assets\"  array of the response. Any property of the asset object can be omitted. If omitFields is not included in the request, response will return all available fields by default.",
                            :type "string"}

               :page {:name "page"
                      :summary "The page number you would like returned. Page numbers start at 1 and end at  \"totalPages\" . If omitted, defaults to the first page (page 1). If the page number requested is less than 1 or higher than  \"totalPages\" , an empty assets array will be returned."
                      :type "integer"}
               :perPage {:name "perPage"
                         :summary "The maximum amount of NFT assets to return on each page. You can request up to 40 items per page. If omitted, defaults to 20 items per page.",
                         :type "integer"}}}}]
   :result {:name "fetchNFTs"
            :schema {:type "object"
                     :required [:owner :assets]
                     :properties
                     {:owner {:type "string"}
                      :assets {:type "array"
                               :items {:type "object"
                                       :required [:name :collectionTokenId :imageUrl :chain :collectionName :provenance]
                                       :properties
                                       {:name {:type "string"}
                                        :collectionTokenId {:type "string"}
                                        :imageUrl {:type "string"}
                                        :chain {:type "string"}
                                        :collectionName {:type "string"}
                                        :provenance {:type "array"
                                                     :items {:type "object"
                                                             :required [:blockNumber :date :from :to]
                                                             :properties
                                                             {:blockNumber {:type "string"}
                                                              :date {:type "string"}
                                                              :from {:type "string"}
                                                              :to {:type "string"}}}}}}}}}}}]}
