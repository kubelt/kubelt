;; sdk/p2p/bb.edn
{:min-bb "0.7.0"
 :tasks
 {:requires
  [[babashka.classpath :as cp]
   [babashka.fs :as fs]
   [cheshire.core :as json]
   [clojure.java.io :as io]]
  :init
  ;; TODO version increment during releases
  ;; TODO check for version discrepancies in package.jsons
  (do
    ;; Add shared build code to classpath.
    (cp/add-classpath "../bb")
    (require '[com.kubelt.build :as kb])
    ;; Extract version from package.json.
    (def version (kb/package-version "package.json"))
    ;; Get the path to the SDK root.
    (def sdk-root (str (fs/canonicalize ".."))))

  ;; Compare the dependencies in parent package.json and local
  ;; package.json For any deps that intersect, make sure they have the
  ;; same version. Note that this only detects the error when the
  ;; necessary dependencies are present in both files; if a dependency
  ;; is missing we can't currently detect that.
  package:check
  {:doc "Check for package.json version discrepancies"
   :task (let [pkg-parent (str (fs/file sdk-root "package.json"))
               pkg-local (str (fs/file "." "package.json"))
               mismatches (kb/package-mismatches pkg-parent pkg-local)]
           (when (not (empty? mismatches))
             (throw (ex-info "mismatched versions" mismatches))))}

  compile:develop
  {:doc "Build a development version of the p2p application"
   :depends [package:check]
   :task (shell {:dir sdk-root} "npx shadow-cljs compile p2p")}

  compile:release
  {:doc "Build a release version of the p2p application"
   :depends [package:check]
   :task (shell {:dir sdk-root} "npx shadow-cljs release p2p")}

  build:chmod
  {:doc "Make p2p application executable"
   :task (let [file-name "index.js"
               permissions "rwxrwxr-x"]
           (fs/set-posix-file-permissions file-name permissions))}

  npm:link
  {:doc "Make p2p locally runnable"
   :task (shell "npm link")}

  build:develop
  {:doc "Build the development version of p2p"
   :depends [compile:develop build:chmod npm:link]}

  build:release
  {:doc "Build the release version of p2p"
   :depends [compile:release build:chmod]}

  pack:js
  {:doc "Create an npm package"
   :depends [build:release]
   :task (shell "npm pack")}

  publish:js
  {:doc "Publish the CLI as an npm package"
   :depends [pack:js]
   :task (let [tgz-name (str/join "" ["kubelt-p2p-" version ".tgz"])
               pack-file (first (fs/glob "." tgz-name))]
           (if-not pack-file
             (throw (ex-info "missing npm package.tgz")))
           (shell "npm publish" pack-file))}

  docker:build
  {:doc "Build a docker image containing the application"
   :depends [build:release]
   :task (let [image-tag (str/join ":" ["kubelt-p2p" version])
               command (str/join " " ["docker" "build" "-t" image-tag "."])]
           (shell command))}}}

;; ALL

  publish:all
  {:doc "Publish all the p2p targets."
   :depends [publish:js]}

