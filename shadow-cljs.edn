;; sdk/shadow-cljs.edn

{:source-paths
 ["src/dev"
  "src/main"
  "src/test"
  "dapp/src"
  "dapp/test"]

 ;; dapp dev configs
 :nrepl {:port 8777}

 ;; NB: we depend on the shadow-cljs provided version of core.async;
 ;; adding an explicit dependency on same causes a warning to be
 ;; generated and the pinned version support by shadow-cljs to replace
 ;; it in any case.

 :dependencies
 [;; needed for dapp
  [binaryage/devtools "1.0.5"]
  ;; a Clojure/Script library for word case conversions
  [camel-snake-kebab/camel-snake-kebab "0.4.2"]
  ;; errors as simple, actionable, generic information
  [com.cognitect/anomalies "0.1.12"]
  ;; data format for conveying values between applications
  [com.cognitect/transit-cljs "0.8.269"]
  ;; a pure Clojure/Script logging library
  [com.taoensso/timbre "5.1.2"]
  ;; tailwind components for dapp
  [com.github.mainej/headlessui-reagent "1.5.0.47"]
  ;; immutable database and Datalog query engine
  [datascript/datascript "1.3.10"]
  ;; fast, idiomatic pretty-printer
  [fipp/fipp "0.6.25"]
  ;; a micro-framework for building data-driven applications
  [integrant/integrant "0.8.0"]
  ;; fast JSON encoding and decoding
  [metosin/jsonista "0.3.5"]
  ;; data-driven schemas for Clojure/Script
  [metosin/malli "0.8.4"]
  ;; request router for dapp
  [metosin/reitit "0.5.16"]
  ;; tools for working with command line arguments
  [org.clojure/tools.cli "1.0.206"]
  ;; react for clojure
  [reagent "1.1.0"]
  ;; redux for reagent
  [re-frame "1.2.0"]]

 ;;:nrepl {:init-ns user.shared}

 ;; Configuration for development-time HTTP server.
 :dev-http {8021 "web/web-test"
            8280 "dapp/resources/public"
            8290 "dapp/target/browser-test"}

 ;; Built-in targets include:
 ;; :browser
 ;; :node-library
 ;; :node-script

 ;; To compile a development build:
 ;; $ npx shadow-cljs compile sdk|cli|web
 ;;
 ;; To compile a release build:
 ;; $ npx shadow-cljs release sdk|cli|web

 ;; It is possible to use shadow-cljs to invoke Clojure code, either to
 ;; run a standalone command or potentially as part of a build (TBD). To
 ;; invoke an example Clojure command:
 ;;   $ npm run cmd:example
 ;; This runs:
 ;;   $ npx shadow-cljs run build.command/example
 ;; Available options:
 ;; * -o / --out-file :: output file name ["target/example.txt"]

 ;; This build target generates a test file but doesn't run it:
 ;; $ npx shadow-cljs compile/release test
 ;;
 ;; When :autorun is set this is performed automatically:
 ;; $ node target/sdk-test.js
 ;;
 ;; The default test entrypoint, provided by shadow-cljs, executes
 ;; cljs.test tests. If you want to use another testing framework
 ;; you'll need to specify a new entrypoint by setting :main.

 :builds
 {;; DAPP (Kubelt React App)
  :dapp
  {:target     :browser
   :output-dir "dapp/resources/public/js/compiled"
   :asset-path "/js/compiled"
   :modules
   {:app {:init-fn dapp.core/init}}
   :devtools
   {:preloads []}
   :dev
   {:compiler-options
    {:closure-defines
     { }}}}

  ;; SDK (Node.js)
  ;; ---------------------------------------------------------------------------
  ;; This is the core Node.js library that provides the Kubelt SDK,
  ;; compiled for use with Node.js.

  ;; TODO rename to :sdk-node?
  :sdk
  {:target :node-library
   ;; Each keyword in the :exports map is available in the generated
   ;; library with that name.
   :exports {:v1 com.kubelt.sdk/node-v1}
   :compiler-options {;; :none :simple :advanced
                      :optimizations :advanced
                      :reader-features #{:node}
                      :infer-externs :true
                      :output-feature-set :es-next}
   :output-to "packages/sdk-js/lib/sdk.js"}

  ;; SDK (npm)
  ;; ---------------------------------------------------------------------------
  ;; Experimental: this build target for the SDK generates an npm module.
  ;; TODO see if we get a better result from webpacking this build output.

  :sdk-npm
  {:target :npm-module
   :entries [com.kubelt.sdk]
   :compiler-options {:optimizations :advanced
                      :infer-externs :true
                      :output-feature-set :es5}
   :output-dir "packages/sdk-npm/lib"}

  ;; SDK tests
  ;; ---------------------------------------------------------------------------

  :sdk-test
  {:target :node-test
   :compiler-options {:reader-features #{:node}}
   :output-to "target/sdk-test.js"
   :ns-regexp "(lib|sdk)\\..*-test$"
   :autorun true}

  ;; SDK (web)
  ;; ---------------------------------------------------------------------------
  ;; This is the core Node.js library that provides the Kubelt SDK,
  ;; compiled for use in the browser.

  ;; TODO rename to :sdk-web
  :web
  {:target :browser
   :output-dir "packages/web/lib"
   :asset-path "/js"
   :modules {:base {:entries [com.kubelt.sdk]
                    :init-fn com.kubelt.sdk/web-v1}}
   :compiler-options {:output-feature-set :browser-2021
                      :optimizations :advanced
                      :reader-features #{:browser}}}

  :web-test
  {:target :browser-test
   :test-dir "target/web-test"
   :ns-regexp "(lib|sdk|web)\\..*-test$"
   :compiler-options {:reader-features #{:browser}}}

  ;; P2P
  ;; ---------------------------------------------------------------------------

  :p2p
  {:target :node-script
   :main com.kubelt.p2p/main!
   :devtools {:before-load-async com.kubelt.p2p/stop!
              :after-load-async com.kubelt.p2p/start!}
   :compiler-options {:reader-features #{:node}
                      :optimizations :advanced}
   :output-to "packages/p2p/lib/p2p.js"}

  :p2p-test
  {:target :node-test
   :ns-regexp "p2p\\..*-test$"
   :compiler-options {:reader-features #{:node}}
   :output-to "target/p2p-test/p2p-test.js"}

  ;; :jwt-test
  ;; {:target :node-test
  ;;  :ns-regexp "jwt-test$"
  ;;  :output-to "target/jwt-test/jwt-test.js"}

  ;; Kubelt Debug CLI
  ;; ---------------------------------------------------------------------------
  ;; This is a development CLI used to run various commands for testing,
  ;; preparing data, or performing other non-customer-facing operations.

  :ddt
  {:target :node-script
   :main com.kubelt.ddt/main
   :compiler-options {:optimizations :simple
                      :infer-externs :true
                      :reader-features #{:node}
                      :output-feature-set :es-next}
   :output-to "packages/ddt/lib/ddt.js"}

  ;; Kubelt CLI
  ;; ---------------------------------------------------------------------------

  :kbt
  {:target :node-script
   :main com.kubelt.kbt/main
   :compiler-options {:optimizations :simple
                      :infer-externs :auto
                      :reader-features #{:node}
                      :output-feature-set :es-next}
   :output-to "packages/kbt/lib/kbt.js"}

  :kbt-test
  {:target :node-test
   :output-to "target/kbt-test.js"
   :ns-regexp "-test$"
   :compiler-options {:reader-features #{:node}}
   :autorun true}

  ;; IPFS Client
  ;; ---------------------------------------------------------------------------

  :ipfs
  {:target :node-library
   :exports {:v0 com.kubelt.ipfs/node-v0}
   :compiler-options {:optimizations :advanced
                      :infer-externs :true
                      :output-feature-set :es-next}
   :output-to "packages/ipfs-js/lib/ipfs.js"}

  :ipfs-test
  {:target :node-test
   :output-to "target/ipfs-test.js"
   :ns-regexp "ipfs\\..*-test$"
   :autorun true}}}
